theme.js
/* 1. Addd this new line */


/* ================ SLATE ================ */
window.theme = window.theme || {};

theme.cacheSelectors = function () {
  theme.cache = {
    // General
    $html                    : $('html'),
    $body                    : $(document.body),

    // paginate
    $paginateBy              : $('.paginateBy'),
    
    // Collection Pages
    $changeView              : $('.change-view'),

  };
};
/*  End of Add this new line */
/* Need to change and add some new line  */


/* 2. Need to change and add some new line  */
/*
  theme.init = function() { 
*/


theme.init = function() {
  theme.cacheSelectors();
  theme.customerTemplates.init();
  theme.collectionViews();
  theme.collectionpaginateBy();
  
  


/* 3. Need to change and add some new line  */
theme.collectionpaginateBy = function () {
  
  if (theme.cache.$paginateBy.length) {
    
    theme.cache.$paginateBy.on('change', function() {
      
      
      
      /* Get the current value. Some value validation could be added here (but we don't) */
      var val = $(this).val();

      /* Send the value as a cart attribute via the AJAX API */
      $.ajax({
        type: "POST",
        url: '/cart.js',
        data: {"attributes[pagination]": val}, /* We are using an attribute named "pagination" */
        success: function(d){
          /* 
      On sucess, reload the page.  
      Warning: If you have scripts on the page that auto trigger the change even the page may reload forever.
      If you do, be sure to add code to account for that.
      */
          
          window.location.reload(); 
        },
        dataType: 'json'
      });
      
      
      
    });
  }
};
/* 3. End of theme.js  */






  <div class="our-collection-right">
    <p>{{ 'collections.general.items_with_count' | t: count: collection.products_count }}</p> 
    
    
    {% comment %}

    The HTML / Liquid section for the select menu.
    You'll add this into your theme in a place that makes sense.

    Relates to the blog post here:
    
    {% endcomment %}

    {% comment %} Make a label (for accessibility) {% endcomment %}
    <span for="paginateBy">Show :</span>
    <select name="paginateBy" id="paginateBy" class="paginateBy filters-toolbar__input--filter" tabindex="-1" aria-hidden="true">
      {%- comment -%}

      We will support pagination from 1 all the way to 50.
      If you wanted smaller ranges you could do something like this:

      {%- assign paginationAmounts = '5,10,15,20,25' | split:',' -%}
      {%- for i in paginationAmounts -%}
      ...
      {%- endfor -%}

      {%- endcomment -%}
      {% for i in (1..50) %}
      {% assign v = i | append:'' %}
      <option value="{{ v }}"{% if cart.attributes.pagination != blank and cart.attributes.pagination %}{% if cart.attributes.pagination == v %} selected{% endif %}{% else %}{% if i == limit %} selected{% endif %}{% endif %}>{{ i }}</option>
      {% endfor %}
    </select>
  </div>





